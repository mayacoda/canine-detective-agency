import { readdir, readFile, writeFile } from 'fs/promises'
import * as path from 'path'

function formatLoadCall(image, dirPath) {
  const name = path.basename(image, '.png')
  const tileSetPath = path.relative('./client/assets', path.resolve(dirPath, image))
  return `scene.load.image('${ name }', '${ tileSetPath }')`
}

let text = `import { Scene } from 'phaser'
 
/* This file is autogenerated by scripts/load-images.js */ 
export const preloadFunctions: Record<string, (scene: Scene) => void> = {
`

try {
  let dirPath = path.resolve(process.cwd(), './client/assets/tilemaps')
  const possibleTileMaps = await readdir(dirPath, {
    encoding: 'utf-8',
    withFileTypes: true
  })

  for (const tileMap of possibleTileMaps) {

    if (tileMap.isFile() && path.extname(tileMap.name) === '.json') {
      const tileMapName = path.basename(tileMap.name, '.json')
      text += `  '${ tileMapName }': function (scene: Scene) {\n`

      let fileContent = await readFile(path.resolve(dirPath, tileMap.name), { encoding: 'utf-8' })
      const tileMapContent = JSON.parse(fileContent)

      text += `    scene.load.tilemapTiledJSON('${ tileMapName }', 'tilemaps/${ tileMap.name }')\n`

      for (const tileSet of tileMapContent.tilesets) {
        let image = tileSet.image
        let tiles = tileSet.tiles
        if (typeof image === 'string') {

          text += '    ' + formatLoadCall(image, dirPath) + '\n'

        } else if (Array.isArray(tiles)) {
          for (const tile of tiles) {

            text += '    ' + formatLoadCall(tile.image, dirPath) + '\n'
          }
        }
      }
      text += '  },\n'
    }
  }
  text += '}'
} catch (err) {
  console.error(err)
}

try {
  await writeFile(path.resolve(process.cwd(), './client/scenes/preload-functions.ts'), text)
} catch (err) {
  console.error(err)
}


